# Backend for the Puzzle Solver Web App
# Using Flask for simplicity and flexibility

from flask import Flask, request, jsonify
import os
from werkzeug.utils import secure_filename
import cv2
import numpy as np

# Configuration
UPLOAD_FOLDER = "uploads"
ALLOWED_EXTENSIONS = {"png", "jpg", "jpeg"}

# Create uploads folder if it doesn't exist
if not os.path.exists(UPLOAD_FOLDER):
    os.makedirs(UPLOAD_FOLDER)

# Initialize Flask app
app = Flask(__name__)
app.config["UPLOAD_FOLDER"] = UPLOAD_FOLDER

# Utility functions
def allowed_file(filename):
    return "." in filename and filename.rsplit(".", 1)[1].lower() in ALLOWED_EXTENSIONS

def process_image(image_path):
    import cv2
    import numpy as np

    image = cv2.imread(image_path)
    if image is None:
        raise ValueError("Invalid image file.")

    # Implement edge detection
    edges = cv2.Canny(image, 100, 200)

    # Implement piece detection and matching logic
    # Placeholder for actual implementation
    steps = [
        "Step 1: Analyze edges and detect pieces.",
        "Step 2: Match similar edges.",
        "Step 3: Assemble pieces row by row.",
        "Step 4: Puzzle complete!"
    ]
    return steps

    # Load the image
    image = cv2.imread(image_path)
    if image is None:
        raise ValueError("Invalid image file.")

    # Simulated response for demo purposes
    steps = [
        "Step 1: Analyze edges and detect pieces.",
        "Step 2: Match similar edges.",
        "Step 3: Assemble pieces row by row.",
        "Step 4: Puzzle complete!"
    ]
    return steps

# Routes
@app.route("/solve", methods=["POST"])
def solve_puzzle():
    try:
        if "image" not in request.files:
            return jsonify({"error": "No file part"}), 400

        file = request.files["image"]
        if file.filename == "":
            return jsonify({"error": "No selected file"}), 400

        if file and allowed_file(file.filename):
            filename = secure_filename(file.filename)
            file_path = os.path.join(app.config["UPLOAD_FOLDER"], filename)
            file.save(file_path)

            steps = process_image(file_path)
            return jsonify({"steps": steps}), 200
        else:
            return jsonify({"error": "File type not allowed"}), 400
    except Exception as e:
        app.logger.error(f"Error processing image: {e}")
        return jsonify({"error": "Internal server error"}), 500

@app.route("/", methods=["GET"])
def index():
    return "Puzzle Solver Backend is running. Use the /solve endpoint to upload images."

# Main driver
if __name__ == "__main__":
    app.run(host="0.0.0.0", port=5000, debug=True)
